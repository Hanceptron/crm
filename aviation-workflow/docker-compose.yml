version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aviation_workflow_db
    environment:
      POSTGRES_USER: aviation_user
      POSTGRES_PASSWORD: aviation_password
      POSTGRES_DB: aviation_workflow
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - aviation_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aviation_user -d aviation_workflow"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: aviation_workflow_redis
    command: redis-server --appendonly yes --requirepass aviation_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - aviation_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    profiles:
      - with-redis

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: aviation_workflow_api
    environment:
      # Application
      APP_ENV: production
      DEBUG: "false"
      
      # Database
      DATABASE_URL: postgresql://aviation_user:aviation_password@postgres:5432/aviation_workflow
      
      # Redis (optional)
      REDIS_URL: redis://:aviation_redis_password@redis:6379/0
      USE_REDIS: "false"
      
      # API Configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      CORS_ORIGINS: "http://localhost:8501,http://localhost:3000"
      
      # Modules
      ENABLED_MODULES: "departments,templates,comments,approvals"
      
      # Security
      SECRET_KEY: "production-secret-key-change-this"
      
      # Burr Configuration
      BURR_STATE_DIR: "/app/burr_state"
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - ./logs:/app/logs
      - burr_state:/app/burr_state
    ports:
      - "8000:8000"
    networks:
      - aviation_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Streamlit Dashboard
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: aviation_workflow_dashboard
    environment:
      # Streamlit Configuration
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_SERVER_HEADLESS: "true"
      STREAMLIT_BROWSER_GATHER_USAGE_STATS: "false"
      
      # API Connection
      API_URL: http://api:8000/api
      
      # Application
      APP_ENV: production
    volumes:
      - ./config.yaml:/app/config.yaml:ro
    ports:
      - "8501:8501"
    networks:
      - aviation_network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aviation_workflow_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/usr/share/nginx/html/static:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - aviation_network
    depends_on:
      - api
      - dashboard
    restart: unless-stopped
    profiles:
      - with-nginx

  # Database Backup Service
  backup:
    image: postgres:15-alpine
    container_name: aviation_workflow_backup
    environment:
      PGPASSWORD: aviation_password
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - aviation_network
    depends_on:
      postgres:
        condition: service_healthy
    command: /backup.sh
    restart: "no"
    profiles:
      - with-backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  burr_state:
    driver: local

networks:
  aviation_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16